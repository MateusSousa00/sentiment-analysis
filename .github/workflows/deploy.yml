name: "CI/CD - Sentiment Analysis API"

on:
  push:
    branches:
      - main
      - production

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Authenticate with Hugging Face
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          huggingface-cli login --token "$HF_TOKEN"

      - name: Download Transformer Model from Hugging Face
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          rm -rf src/models/transformer_finetuned  # Force fresh download
          echo "Model not found locally. Downloading from Hugging Face..."
          mkdir -p src/models/transformer_finetuned
          huggingface-cli login --token $HF_TOKEN
          huggingface-cli download Mateussousa00/sentiment-analysis-model --local-dir src/models/transformer_finetuned
          ls -lh src/models/transformer_finetuned  # Debugging check

      - name: Run Full Pipeline (Dataset, Preprocessing, Training)
        run: |
          python run_pipeline.py || { echo "Pipeline failed. Stopping build."; exit 1; }

      - name: Run Tests and Check Coverage
        run: |
          pytest --cov=src tests/ --cov-report=term-missing | tee coverage.txt
          coverage_percent=$(grep -Po '\bTOTAL.*\b\K\d+(?=%)' coverage.txt)
          echo "Coverage: $coverage_percent%"
          if [ "$coverage_percent" -lt 85 ]; then
            echo "Test coverage is below 85%, deployment stopped."
            exit 1
          fi

  build_docker:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t myuser/sentiment-analysis-api:latest .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      
      - name: Build and push Docker images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: sentiment-analysis-api
        run: |      
          # Make branch names safe for Docker tags
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')  
          COMMIT_SHA=$(git rev-parse --short HEAD)
      
          # Full Docker image name (namespace/repo:tag)
          IMAGE_REPO="$DOCKER_USERNAME/$IMAGE_NAME"
      
          # Build Docker image with multiple tags
          docker build -t $IMAGE_REPO:$BRANCH_NAME -t $IMAGE_REPO:$COMMIT_SHA .
      
          # Push both tags
          docker push $IMAGE_REPO:$BRANCH_NAME
          docker push $IMAGE_REPO:$COMMIT_SHA

  deploy_vercel:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --yes --prod