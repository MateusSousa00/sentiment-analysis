name: "CI/CD - Sentiment Analysis API"

on:
  push:
    branches:
      - main
      - production

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download Dataset (No Credentials Required)
        run: |
          mkdir -p src/data/raw
          if [ ! -f "src/data/raw/imdb_dataset.csv" ]; then
            echo "‚ö° Dataset not found, attempting to download..."
            python src/data_loader.py || echo "‚ùå Dataset download failed. Retrying..."
            sleep 5
            python src/data_loader.py || echo "‚ùå Dataset download failed again. Stopping build."
          fi
          
          if [ ! -f "src/data/raw/imdb_dataset.csv" ]; then
            echo "‚ùå Dataset download failed after 2 attempts. Stopping build."
            exit 1
          fi

      - name: Check & Train Baseline Model if Missing
        run: |
          mkdir -p src/data/processed/imdb_hf
          if [ ! -f "src/data/raw/imdb_dataset.csv" ]; then
            echo "‚ùå Dataset is missing. Cannot train model."
            exit 1
          fi
          [ -f "src/models/baseline_model/baseline_model.pkl" ] || python src/training/train_baseline_model.py

      - name: Run Tests and Check Coverage
        run: |
          pytest --cov=src tests/ --cov-report=term-missing | tee coverage.txt
          coverage_percent=$(grep -Po '\bTOTAL.*\b\K\d+(?=%)' coverage.txt)
          echo "üìä Coverage: $coverage_percent%"
          if [ "$coverage_percent" -lt 85 ]; then
            echo "‚ùå Test coverage is below 85%, deployment stopped."
            exit 1
          fi

  build_docker:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t myuser/sentiment-analysis-api:latest .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      
      - name: Build and push Docker images
        run: |
          IMAGE_NAME="my-api"
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')  # Make sure branch names are safe for tags
          COMMIT_SHA=$(git rev-parse --short HEAD)
      
          # Build the image
          docker build -t $IMAGE_NAME:$BRANCH_NAME -t $IMAGE_NAME:$COMMIT_SHA .
      
          # Push both tags
          docker push $IMAGE_NAME:$BRANCH_NAME
          docker push $IMAGE_NAME:$COMMIT_SHA

  deploy_vercel:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        run: |
          npm install -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod
